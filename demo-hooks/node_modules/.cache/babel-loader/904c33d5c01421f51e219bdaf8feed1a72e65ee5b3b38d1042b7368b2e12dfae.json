{"ast":null,"code":"var _jsxFileName = \"/Users/manhns/Documents/traning/tranning_ReactJS/FWA.EC.ManhNS1/demo-hooks/src/use-reducer/UseReducer3.js\",\n  _s = $RefreshSig$();\nimport React, { useCallback, useReducer } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialState = {\n  count: 0,\n  step: 1\n};\n\n// Hàm reducer\nfunction reducer(state, action) {\n  switch (action.type) {\n    case \"increment\":\n      return {\n        ...state,\n        count: state.count + state.step\n      };\n    case \"decrement\":\n      return {\n        ...state,\n        count: state.count - state.step\n      };\n    case \"setStep\":\n      return {\n        ...state,\n        step: action.payload\n      };\n    default:\n      return state;\n  }\n}\nconst UseReducer3 = () => {\n  _s();\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  // Sử dụng useCallback để memoize hàm handleChangeStep\n  const handleChangeStep = useCallback(e => {\n    dispatch({\n      type: \"setStep\",\n      payload: parseInt(e.target.value)\n    });\n  }, [dispatch]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Counter\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Count: \", state.count]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"number\",\n      value: state.step,\n      onChange: handleChangeStep // Sử dụng hàm đã memoize\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => dispatch({\n        type: \"increment\"\n      }),\n      children: \"Increment\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => dispatch({\n        type: \"decrement\"\n      }),\n      children: \"Decrement\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n};\n_s(UseReducer3, \"/bNQhTbHFS2iB24qLogqzpEjGwA=\");\n_c = UseReducer3;\nexport default UseReducer3;\nvar _c;\n$RefreshReg$(_c, \"UseReducer3\");","map":{"version":3,"names":["React","useCallback","useReducer","jsxDEV","_jsxDEV","initialState","count","step","reducer","state","action","type","payload","UseReducer3","_s","dispatch","handleChangeStep","e","parseInt","target","value","children","fileName","_jsxFileName","lineNumber","columnNumber","onChange","onClick","_c","$RefreshReg$"],"sources":["/Users/manhns/Documents/traning/tranning_ReactJS/FWA.EC.ManhNS1/demo-hooks/src/use-reducer/UseReducer3.js"],"sourcesContent":["import React, { useCallback, useReducer } from \"react\";\n\nconst initialState = {\n  count: 0,\n  step: 1,\n};\n\n// Hàm reducer\nfunction reducer(state, action) {\n  switch (action.type) {\n    case \"increment\":\n      return { ...state, count: state.count + state.step };\n    case \"decrement\":\n      return { ...state, count: state.count - state.step };\n    case \"setStep\":\n      return { ...state, step: action.payload };\n    default:\n      return state;\n  }\n}\nconst UseReducer3 = () => {\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  // Sử dụng useCallback để memoize hàm handleChangeStep\n  const handleChangeStep = useCallback(\n    (e) => {\n      dispatch({ type: \"setStep\", payload: parseInt(e.target.value) });\n    },\n    [dispatch]\n  );\n\n  return (\n    <div>\n      <h2>Counter</h2>\n      <p>Count: {state.count}</p>\n      <input\n        type=\"number\"\n        value={state.step}\n        onChange={handleChangeStep} // Sử dụng hàm đã memoize\n      />\n      <button onClick={() => dispatch({ type: \"increment\" })}>Increment</button>\n      <button onClick={() => dispatch({ type: \"decrement\" })}>Decrement</button>\n    </div>\n  );\n};\n\nexport default UseReducer3;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,WAAW,EAAEC,UAAU,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEvD,MAAMC,YAAY,GAAG;EACnBC,KAAK,EAAE,CAAC;EACRC,IAAI,EAAE;AACR,CAAC;;AAED;AACA,SAASC,OAAOA,CAACC,KAAK,EAAEC,MAAM,EAAE;EAC9B,QAAQA,MAAM,CAACC,IAAI;IACjB,KAAK,WAAW;MACd,OAAO;QAAE,GAAGF,KAAK;QAAEH,KAAK,EAAEG,KAAK,CAACH,KAAK,GAAGG,KAAK,CAACF;MAAK,CAAC;IACtD,KAAK,WAAW;MACd,OAAO;QAAE,GAAGE,KAAK;QAAEH,KAAK,EAAEG,KAAK,CAACH,KAAK,GAAGG,KAAK,CAACF;MAAK,CAAC;IACtD,KAAK,SAAS;MACZ,OAAO;QAAE,GAAGE,KAAK;QAAEF,IAAI,EAAEG,MAAM,CAACE;MAAQ,CAAC;IAC3C;MACE,OAAOH,KAAK;EAChB;AACF;AACA,MAAMI,WAAW,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACxB,MAAM,CAACL,KAAK,EAAEM,QAAQ,CAAC,GAAGb,UAAU,CAACM,OAAO,EAAEH,YAAY,CAAC;;EAE3D;EACA,MAAMW,gBAAgB,GAAGf,WAAW,CACjCgB,CAAC,IAAK;IACLF,QAAQ,CAAC;MAAEJ,IAAI,EAAE,SAAS;MAAEC,OAAO,EAAEM,QAAQ,CAACD,CAAC,CAACE,MAAM,CAACC,KAAK;IAAE,CAAC,CAAC;EAClE,CAAC,EACD,CAACL,QAAQ,CACX,CAAC;EAED,oBACEX,OAAA;IAAAiB,QAAA,gBACEjB,OAAA;MAAAiB,QAAA,EAAI;IAAO;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAChBrB,OAAA;MAAAiB,QAAA,GAAG,SAAO,EAACZ,KAAK,CAACH,KAAK;IAAA;MAAAgB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC3BrB,OAAA;MACEO,IAAI,EAAC,QAAQ;MACbS,KAAK,EAAEX,KAAK,CAACF,IAAK;MAClBmB,QAAQ,EAAEV,gBAAiB,CAAC;IAAA;MAAAM,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC7B,CAAC,eACFrB,OAAA;MAAQuB,OAAO,EAAEA,CAAA,KAAMZ,QAAQ,CAAC;QAAEJ,IAAI,EAAE;MAAY,CAAC,CAAE;MAAAU,QAAA,EAAC;IAAS;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eAC1ErB,OAAA;MAAQuB,OAAO,EAAEA,CAAA,KAAMZ,QAAQ,CAAC;QAAEJ,IAAI,EAAE;MAAY,CAAC,CAAE;MAAAU,QAAA,EAAC;IAAS;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACvE,CAAC;AAEV,CAAC;AAACX,EAAA,CAxBID,WAAW;AAAAe,EAAA,GAAXf,WAAW;AA0BjB,eAAeA,WAAW;AAAC,IAAAe,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}